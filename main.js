const { chromium } = require("playwright");
const login = require("./login");
const fetchDealershipHours = require("./fetchDealershipHours");
const fetchPendingWritesCount = require("./fetchPendingWritesCount");
const resubmitter = require("./resubmitter");

async function initBrowser() {
  const browser = await chromium.launch({ headless: true });
  const context = await browser.newContext();
  const page = await context.newPage();
  await login(page);
  return { browser, page };
}

async function runTasks(shellNums) {
  let { browser, page } = await initBrowser();

  for (let i = 0; i < shellNums.length; i++) {
    try {
      const url = shellNums[i];
      const isLastDealer = i === shellNums.length - 1;

      await page.goto(
        `https://autoloop.us/dms/App/CompanySelector.aspx?CompanyId=${url}`
      );
      const hasPendingWrites = await fetchPendingWritesCount(page);
      if (!hasPendingWrites) {
        if (isLastDealer) {
          console.log(`last dealer`);
        } else {
          console.log(`No pending writes for ${url}, moving to the next.`);
        }

        continue;
      }

      const isOpen = await fetchDealershipHours(page);
      if (!isOpen) {
        if (isLastDealer) {
          console.log(`Dealerships is closed on ${currentDay}, last dealer`);
        } else {
          console.log(
            `Dealership is closed on ${currentDay}, moving to the next.`
          );
        }
        continue;
      }

      await page.goto(
        "https://autoloop.us/DMS/App/DealershipSettings/PendingAppointmentWrites.aspx"
      );

      await resubmitter(page);
    } catch (error) {
      console.error(`Error occurred while processing ${shellNums[i]}:`, error);
      try {
        await browser.close();
      } catch (error) {
        console.error(`Error occurred while closing the browser:`, error);
      }
      console.log(`Restarting the process for: ${shellNums[i]}`);
      ({ browser, page } = await initBrowser());
      i--;
      continue;
    } finally {
      await new Promise((resolve) => setTimeout(resolve, 1 * 1000)); // wait 20 seconds
    }
  }

  console.log(`Completed tasks for: ${shellNums.join(", ")}`);
  await browser.close();
}

async function scheduleBatches() {
  const taskBatches = [
    [
      7806, 13651, 10773, 9090, 7625, 2364, 13844, 3761, 9156, 8824, 13685,
      9820, 6870, 13671, 10026, 13984, 8776, 10547, 9798, 9004, 7288, 13653,
      13944, 10404, 2941, 6705, 13903, 7730, 13370, 7499, 2235, 2794, 10527,
      9150, 9163, 14143, 9070, 5095, 8489, 2571, 8671, 8915, 6890, 10677, 6833,
      2633, 8899, 2516, 9786, 9178, 7901, 6909, 12177, 9053, 2208, 439, 10808,
      7894, 10120, 13834, 9273, 8819, 9116, 9075, 8949, 2380, 2707, 3637, 8888,
      13833, 2486, 2321, 13904, 2627, 2328, 2908, 2384, 2736, 13968, 9839, 6714,
      2974, 13907, 5132, 8601, 12994, 13617, 13130, 4487, 12716, 2675, 5891,
      8700, 2468, 1709, 8548, 13972, 13670, 13624, 2666, 10511, 12779, 12906,
      13916, 2216, 10544, 8808, 7822, 13478, 2261, 2399, 7648, 12114, 10967,
      2265, 4777, 13403, 2425, 4916, 9707, 13820, 9209, 2517, 8547, 7389, 8760,
      13672, 2913, 2526, 13639, 9127, 2305, 2861, 9148, 10046, 8988, 4313,
      13911, 9262, 9795, 4888, 7482, 2534, 8712, 2791, 9045, 13931, 13493, 4609,
      13440, 12901, 8568, 13982, 10252, 13650, 7791, 2905, 2888, 2800, 9284,
      13857, 8709, 8864, 10088, 3075, 7805, 13946, 6218, 2780, 2996, 8805, 6254,
      9823, 8806, 13225, 6502, 3524, 2715, 2188, 13452, 11361, 3952, 9791,
      10515, 13879, 8747, 3596, 9207, 2447, 14155, 8803, 13507, 2382, 9222,
      3582, 8994, 8991, 9274, 9069, 13652, 2630, 5372, 8567, 8918, 1686, 3113,
      12754, 10772, 9276, 2471, 6805, 9724, 7649, 2765, 8801, 10525, 9184, 8880,
      10720, 3247, 13966, 9242, 9713, 8900, 4767, 9057, 5945, 8491, 8989, 8497,
      9003, 13825, 9079, 13007, 13402, 8970, 9836, 8402, 2565, 2318, 9028,
      13999, 9015, 7912, 8516, 8907, 12910, 9988, 2750, 9324, 2331, 4771, 8624,
      8566, 9109, 2703, 2704, 2496, 2405, 13273, 8599, 2844, 13614, 8965, 13949,
      2249, 2459, 13140, 7302, 7532, 2394, 13758, 6567, 2935, 8556, 13662, 4079,
      4539, 8781, 4280, 9101, 2381, 9139, 8828, 2400, 8788, 2646, 8882, 10531,
      2579, 13785, 10505, 2339, 8919, 1721, 2307, 9213, 8883, 2553, 4470, 9147,
      4549, 13823, 7662, 2663, 12941, 13118, 8554, 9168, 13920, 10474, 9199,
      9192, 8532, 13998, 13794, 2342, 9113, 12863, 9173,
    ],
    [
      6813, 8337, 13789, 2885, 9231, 9211, 6729, 9790, 10702, 13107, 9014, 9047,
      7936, 8980, 13960, 13239, 10485, 4978, 2617, 9203, 8993, 5782, 7417,
      13782, 2705, 13371, 5554, 3792, 7297, 13321, 7363, 9814, 8839, 13646,
      7984, 9033, 9237, 8924, 9154, 13964, 13948, 2313, 13985, 13979, 8759,
      9214, 8987, 4579, 12926, 2624, 6271, 13981, 2492, 2521, 2525, 10377, 2412,
      12170, 13925, 8555, 7693, 3099, 9210, 8838, 4730, 8837, 2618, 8544, 8990,
      2533, 2388, 9208, 13778, 9099, 9737, 9782, 9107, 13919, 9246, 13901, 8611,
      12920, 13941, 7, 2816, 2378, 13927, 10479, 9182, 12890, 9748, 7301, 5669,
      8962, 13427, 8519, 7177, 7983, 9200, 13937, 9283, 2647, 13101, 13333,
      7527, 10844, 8999, 2815, 8974, 2998, 2519, 7414, 13566, 8985, 13745, 8834,
      2690, 2213, 7818, 2356, 13942, 12880, 9744, 7801, 2560, 13711, 2881, 2781,
      2351, 10554, 2383, 13950, 8927, 7913, 2684, 12731, 8956, 2642, 13218,
      8455, 9345, 2709, 3763, 12836, 8879, 2465, 8931, 10736, 13442, 13409,
      10050, 2608, 1253, 7201, 2322, 10477, 3463, 3021, 6650, 2851, 10788, 2346,
      3624, 3998, 7618, 2727, 9245, 13012, 2859, 5424, 3521, 2763, 2319, 5458,
      12980, 8676, 5806, 13962, 8557, 13264, 13997, 2220, 12999, 10543, 13551,
      4484, 7997, 1186, 13947, 7986, 1136, 2201, 9195, 4860, 11071, 9202, 8904,
      6002, 9131, 2487, 5426, 13686, 10446, 8986, 9248, 5092, 6686, 8536, 13342,
      8938, 10385, 2801, 2329, 10445, 3383, 10526, 13503, 2767, 9835, 8800,
      2413, 2373, 4212, 2396, 2491, 10328, 7621, 2654, 9085, 9893, 2418, 13383,
      9333, 2233, 2520, 13000, 12169, 5657, 8792, 7299, 13173, 13918, 8995,
      3108, 13750, 13875, 7719, 9225, 7993, 9961, 9133, 2358, 5312, 8866, 3032,
      13880, 13688, 2344, 8901, 13527, 2544, 12972, 9341, 13110, 10509, 2543,
      13419, 8968, 3494, 13807, 13889, 8600, 2591, 8912, 6566, 2518, 2359, 8750,
      13876, 12484, 8934, 2291, 13961, 8585, 8617, 8826, 13373, 7453, 2531,
      2327, 2410, 7877, 13592, 8570, 9037, 3112, 3834, 9819, 9708, 9095, 6299,
      2460, 13956, 13334, 9061, 8972, 13244, 8939, 8835, 13085, 4195, 2738,
      2612, 9162, 2352, 9219, 13102, 7867, 12176, 3148,
    ],
    [
      13790, 9882, 8665, 2880, 9801, 8840, 7517, 8807, 13852, 13824, 10493,
      7387, 13958, 13168, 9743, 9298, 8905, 6831, 9777, 4056, 13915, 8579, 8502,
      9030, 8459, 12876, 8932, 9822, 10555, 13786, 8814, 8565, 2760, 9640,
      10453, 9259, 2802, 2511, 2409, 7658, 10327, 2527, 3731, 2268, 2221, 13983,
      2967, 13777, 13594, 6611, 2376, 2361, 3071, 13579, 4368, 6796, 3508, 3159,
      13314, 9034, 13366, 13707, 8381, 2230, 6744, 7261, 5651, 10523, 13752,
      13266, 10576, 2649, 7489, 2338, 7924, 2906, 2149, 9989, 9212, 7985, 10241,
      3140, 9094, 2672, 13518, 2731, 2793, 13574, 2185, 12912, 13350, 13936,
      9229, 9117, 12889, 9271, 8966, 2440, 3079, 5969, 1664, 13079, 10810, 1677,
      8795, 13250, 8996, 2660, 2343, 12986, 2484, 13926, 13821, 8618, 2712,
      7300, 13042, 13924, 9194, 7891, 3427, 8602, 9059, 13509, 12837, 8796,
      4364, 3330, 9166, 9796, 13909, 9308, 13559, 3583, 8851, 2934, 2470, 8936,
      13939, 9946, 5637, 8816, 2575, 8903, 13839, 9165, 2963, 8928, 10372, 8428,
      2749, 13738, 9355, 7631, 10553, 9055, 12911, 2947, 10110, 2976, 3734,
      7831, 13796, 8529, 2805, 9157, 2568, 2668, 13838, 8635, 12821, 10658,
      9234, 13159, 2687, 2297, 13448, 2481, 2485, 9319, 13535, 8809, 2634, 5198,
      2217, 7925, 13929, 12726, 8771, 2629, 13943, 2246, 13563, 9052, 12969,
      2498, 2825, 10748, 9164, 9119, 13973, 12886, 3758, 9098, 9745, 13591,
      9161, 12816, 8598, 9029, 13501, 13154, 9291, 13801, 8859, 2390, 2556,
      8510, 9987, 2577, 3000, 3194, 7526, 10548, 2497, 7493, 9174, 10864, 2397,
      8831, 3549, 7262, 948, 13482, 8503, 2706, 2742, 13276, 5294, 8964, 2270,
      13793, 13967, 2661, 3165, 10599, 2363, 4271, 2458, 3051, 2375, 2243,
      13980, 8825, 12637, 8186, 10078, 8981, 8958, 9108, 13795, 8198, 8802,
      13292, 10045, 13341, 2584, 13969, 8952, 2337, 7487, 10480, 6800, 2969,
      2655, 7979, 9071, 10764, 13797, 13798, 2726, 2508, 9013, 10763, 7657,
      8867, 2714, 7572, 8886, 8923, 9048, 13800, 12296, 2541, 9102, 13275, 2314,
      8794, 13217, 8908, 13255, 9325, 13039, 7564, 13754, 9112, 2708, 6845,
      13628, 8906, 2610, 9128, 2828, 13921, 2645, 13877, 2770, 2269, 13086,
      8982,
    ],
    [
      8983, 13165, 10452, 13914, 10512, 1719, 8873, 9130, 4481, 9032, 13616,
      13708, 3050, 2473, 7994, 13783, 13339, 8623, 8810, 1571, 8935, 2621, 4872,
      9803, 9268, 2759, 13945, 2785, 10918, 10441, 2623, 13940, 9236, 9267,
      9691, 2795, 9151, 10510, 4569, 8791, 12706, 10450, 4613, 13832, 3029,
      3063, 13784, 2472, 2426, 2507, 7472, 9087, 9083, 9775, 8969, 8992, 10059,
      13136, 13163, 8758, 13096, 8977, 13460, 10778, 2203, 2354, 2597, 7530,
      9017, 2224, 13575, 7804, 10563, 13933, 5408, 3793, 13687, 2406, 5654,
      8948, 10774, 9350, 13955, 13607, 13727, 8910, 13922, 6454, 2451, 10259,
      9141, 2744, 8830, 9016, 379, 4859, 10387, 3753, 12975, 13128, 9000, 13221,
      10227, 8865, 9303, 9153, 5990, 10775, 9011, 9106, 7571, 9138, 5459, 6668,
      2720, 13260, 5633, 2386, 10340, 7837, 8419, 13928, 7464, 7494, 13582,
      10245, 3042, 2778, 12991, 9036, 13953, 13179, 9115, 9172, 9620, 13414,
      13760, 8921, 2988, 13709, 2735, 8911, 12971, 3013, 2665, 3181, 6429,
      13971, 9649, 9019, 9750, 8042, 2393, 10726, 2680, 2244, 7786, 9082, 2558,
      9039, 13959, 9252, 13024, 10552, 13272, 8526, 2724, 8492, 9143, 13243,
      2669, 5830, 13986, 10924, 13923, 12879, 8892, 8941, 9084, 2832, 2422,
      4611, 2550, 8890, 7651, 9155, 13502, 2606, 6689, 4792, 13963, 12791, 9223,
      8916, 9240, 2240, 2232, 1645, 13791, 9699, 2981, 7445, 5946, 2870, 13663,
      3735, 13548, 13957, 8868, 14149, 4380, 13224, 10047, 9158, 2205, 2614,
      6583, 2609, 8768, 8619, 12915, 12957, 3686, 13970, 9007, 6436, 10448,
      3503, 2561, 2580, 9074, 5944, 7531, 2632, 7918, 9261, 13087, 10689, 9066,
      5365, 13504, 8841, 9105, 9118, 9286, 2909, 8925, 6234, 2479, 9125, 8944,
      10579, 4365, 9704, 8500, 9256, 4540, 9097, 13593, 7289, 13806, 2462, 3562,
      5626, 14164, 9088, 10594, 9009, 13917, 5507, 3800, 2414, 2667, 6925, 7887,
      3739, 3438, 2449, 8846, 2218, 2227, 13726, 9799, 9140, 5093, 2966, 13974,
      13549, 3012, 9191, 8878, 9092, 13105, 9802, 13938, 12881, 13788, 13213,
      12908, 10776, 2831, 8975, 3738, 2872, 8953, 13951, 3509, 12839, 9738,
      7507, 7134, 3030, 13405, 10440, 9137, 5943, 10932, 9698, 9135,
    ],
  ];

  const dealershipsToSkip = [
    6695, 8435, 5301, 8416, 13077, 8107, 12902, 13586, 5439, 7987, 9343, 9800,
    8637, 10497, 12786, 6184, 6721, 5746, 12958, 7340, 13271, 7830, 9634, 9850,
    10758, 4989, 7884, 10581, 12653, 10791, 6618, 3416, 13073, 5745, 10843,
    7241, 8780,
  ];

  let currentBatch = 0;

  const currentDealerBatch = taskBatches[currentBatch].filter(
    (dealer) => !dealershipsToSkip.includes(dealer)
  );

  async function executeBatch() {
    if (currentBatch >= taskBatches.length) {
      console.log("All batches have been ran; resetting to first batch");
      currentBatch = 0;
    }

    console.log(`Starting batch ${currentBatch + 1}`);
    await runTasks(currentDealerBatch);
    currentBatch++;
    setTimeout(executeBatch, 30 * 60 * 1000); // 5 minute wait
  }
  executeBatch();
}

scheduleBatches().catch(console.error);
/*
async function main() {
  const tasks = [
    // runTasks([8579, 5890, 5946]),
    // runTasks([5946]),
    // runTasks([8989, 1593, 9282]),
    // runTasks([7283, 1082, 1382]),
    //,,
    runTasks([8579, 5890, 5946, 5974, 5990, 6184, 6218, 6318, 7826, 13268]),
    runTasks([13321, 13579, 13738, 13828, 2213, 2227, 2269, 2297, 2325, 2339]),
    runTasks([2353, 2367, 2381, 2409, 2451, 2465, 2479, 2507, 2521, 2535]),
    // runTasks([2256, 2270, 2291]),
    // runTasks([2305, 2312, 2319]),
    // runTasks([2326, 2333, 2340]),
  ];

  // Run all tasks concurrently
  // await Promise.all(tasks);
}

main().catch(console.error);
*/
